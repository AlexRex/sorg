name: sorg CI

on:
  pull_request:
  push:
  schedule:
    # once an hour
    - cron: "0 * * * *"

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    env:
      CLOUDFRONT_ID: E2D97SPIHRBCUA
      GOOGLE_ANALYTICS_ID: UA-47798518-1

    services:
      postgres:
        image: postgres:12.0
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          # will assign a random free host port
          - 5432/tcp
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Install Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.13.x

      - name: Install Golint
        run: go get -u golang.org/x/lint/golint

      - name: Install tooling from Apt
        # Postgres runs in a container, but we also need the client-side
        # tooling.
        run: sudo apt-get install awscli imagemagick graphicsmagick postgresql-client

      # Uses an artifact built by: https://github.com/brandur/mozjpeg-builder
      #
      # TODO: It'd be nice to have this automatically discover the latest
      # version, which would likely involve publishing a release or uploading
      # to S3.
      - name: Download mozjpeg
        run: aws s3 cp s3://mozjpeg-brandur/mozjpeg_4.0.0_amd64.deb mozjpeg.deb
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWSAccessKeyID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWSSecretAccessKey }}

      - name: Install mozjpeg
        run: sudo dpkg -i mozjpeg.deb

      - name: Find mozjpeg
        run: ls /opt/mozjpeg/bin

      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
          path: go/src/github.com/brandur/sorg

      - name: Debug
        run: |
          echo "github.ref=${{ github.ref }}"
          echo "go env GOPATH=$(go env GOPATH)"
          echo "pwd=$(pwd)"
          echo "GITHUB_WORKSPACE=${GITHUB_WORKSPACE}"
          echo "HOME=${HOME}"

      - name: Clean
        run: make clean

      - name: "Go: Install"
        run: make install

      - name: "Create database: sorg-test"
        run: createdb sorg-test
        env:
          PGHOST: localhost
          PGPORT: ${{ job.services.postgres.ports[5432] }}
          PGUSER: postgres
          PGPASSWORD: postgres
          PGDATABASE: postgres

      - name: "Go: Test"
        run: make test
        env:
          PGHOST: localhost
          PGPORT: ${{ job.services.postgres.ports[5432] }}
          PGUSER: postgres
          PGPASSWORD: postgres
          PGDATABASE: postgres

      - name: "Go: Vet"
        run: make vet

      - name: "Check: Dropbox image ?dl=0"
        run: make check-dl0

      - name: "Check: Gofmt"
        run: make check-gofmt

      # Unfortunately there's some oddity in GitHub's environment that causes
      # this to fail:
      #
      #     /home/runner/work/_temp/3939b8a1-56f2-4fd9-8434-1950a338feb7.sh: line 1: unexpected EOF while looking for matching `"'
      #
      # Action is probably to try converting to Go modules first and see if
      # that resolves it.
      #
      # - name: "Check: Golint"
      #   run: make lint"
      #

      - name: "Check: Markdown headers"
        run: make check-headers

      - name: "Check: Retina assets"
        run: make check-retina

      # Download any markers that have not yet been committed to Git to save
      # redoing download/resize work.
      - name: "Download photo markers"
        run: make photographs-download-markers
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWSAccessKeyID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWSSecretAccessKey }}
        if: github.ref == 'refs/heads/master'

      - name: "Build: Development"
        run: make build
        env:
          BLACK_SWAN_DATABASE_URL: ${{ secrets.BlackSwanDatabaseURL }}
          DRAFTS: true
          TARGET_DIR: ./public-dev

      - name: "Build: Production"
        run: make build
        env:
          BLACK_SWAN_DATABASE_URL: ${{ secrets.BlackSwanDatabaseURL }}

      - name: "Deploy: Development"
        run: make deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWSAccessKeyID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWSSecretAccessKey }}
          S3_BUCKET: brandur.org-dev
          TARGET_DIR: ./public-dev
        if: github.ref == 'refs/heads/master'

      - name: "Deploy: Production"
        run: make deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWSAccessKeyID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWSSecretAccessKey }}
          S3_BUCKET: brandur.org
          TARGET_DIR: ./public
        if: github.ref == 'refs/heads/master'

      - name: Upload photos
        run: make photographs-upload
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWSAccessKeyID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWSSecretAccessKey }}
        if: github.ref == 'refs/heads/master'
